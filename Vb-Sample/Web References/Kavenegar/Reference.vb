'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.17929
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.17929.
'
Namespace Kavenegar
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="v1Soap", [Namespace]:="http://api.kavenegar.com/")>  _
    Partial Public Class v1
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private SendSimpleByApikeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendSimpleByLoginInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendArrayByApikeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendArrayByLoginInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetStatusByApikeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetStatusByLoginInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CancelByApikeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CancelByLoginInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReceiveByApikeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReceiveByLoginInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemainCreditByApiKeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemainCreditByLoginInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.Vb_Sample.My.MySettings.Default.Vb_Sample_Kavenegar_v1
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event SendSimpleByApikeyCompleted As SendSimpleByApikeyCompletedEventHandler
        
        '''<remarks/>
        Public Event SendSimpleByLoginInfoCompleted As SendSimpleByLoginInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event SendArrayByApikeyCompleted As SendArrayByApikeyCompletedEventHandler
        
        '''<remarks/>
        Public Event SendArrayByLoginInfoCompleted As SendArrayByLoginInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetStatusByApikeyCompleted As GetStatusByApikeyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetStatusByLoginInfoCompleted As GetStatusByLoginInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event CancelByApikeyCompleted As CancelByApikeyCompletedEventHandler
        
        '''<remarks/>
        Public Event CancelByLoginInfoCompleted As CancelByLoginInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event ReceiveByApikeyCompleted As ReceiveByApikeyCompletedEventHandler
        
        '''<remarks/>
        Public Event ReceiveByLoginInfoCompleted As ReceiveByLoginInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event RemainCreditByApiKeyCompleted As RemainCreditByApiKeyCompletedEventHandler
        
        '''<remarks/>
        Public Event RemainCreditByLoginInfoCompleted As RemainCreditByLoginInfoCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.kavenegar.com/SendSimpleByApikey", RequestNamespace:="http://api.kavenegar.com/", ResponseNamespace:="http://api.kavenegar.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendSimpleByApikey(ByVal apikey As String, ByVal sender As String, ByVal message As String, ByVal receptor() As String, ByVal unixdate As Long, ByVal msgmode As Integer, ByRef status As Integer, ByRef statusmessage As String) As Long()
            Dim results() As Object = Me.Invoke("SendSimpleByApikey", New Object() {apikey, sender, message, receptor, unixdate, msgmode, status, statusmessage})
            status = CType(results(1),Integer)
            statusmessage = CType(results(2),String)
            Return CType(results(0),Long())
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendSimpleByApikeyAsync(ByVal apikey As String, ByVal sender As String, ByVal message As String, ByVal receptor() As String, ByVal unixdate As Long, ByVal msgmode As Integer, ByVal status As Integer, ByVal statusmessage As String)
            Me.SendSimpleByApikeyAsync(apikey, sender, message, receptor, unixdate, msgmode, status, statusmessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendSimpleByApikeyAsync(ByVal apikey As String, ByVal sender As String, ByVal message As String, ByVal receptor() As String, ByVal unixdate As Long, ByVal msgmode As Integer, ByVal status As Integer, ByVal statusmessage As String, ByVal userState As Object)
            If (Me.SendSimpleByApikeyOperationCompleted Is Nothing) Then
                Me.SendSimpleByApikeyOperationCompleted = AddressOf Me.OnSendSimpleByApikeyOperationCompleted
            End If
            Me.InvokeAsync("SendSimpleByApikey", New Object() {apikey, sender, message, receptor, unixdate, msgmode, status, statusmessage}, Me.SendSimpleByApikeyOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendSimpleByApikeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendSimpleByApikeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendSimpleByApikeyCompleted(Me, New SendSimpleByApikeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.kavenegar.com/SendSimpleByLoginInfo", RequestNamespace:="http://api.kavenegar.com/", ResponseNamespace:="http://api.kavenegar.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendSimpleByLoginInfo(ByVal userName As String, ByVal password As String, ByVal sender As String, ByVal message As String, ByVal receptor() As String, ByVal unixdate As Long, ByVal msgmode As Integer, ByRef status As Integer, ByRef statusmessage As String) As Long()
            Dim results() As Object = Me.Invoke("SendSimpleByLoginInfo", New Object() {userName, password, sender, message, receptor, unixdate, msgmode, status, statusmessage})
            status = CType(results(1),Integer)
            statusmessage = CType(results(2),String)
            Return CType(results(0),Long())
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendSimpleByLoginInfoAsync(ByVal userName As String, ByVal password As String, ByVal sender As String, ByVal message As String, ByVal receptor() As String, ByVal unixdate As Long, ByVal msgmode As Integer, ByVal status As Integer, ByVal statusmessage As String)
            Me.SendSimpleByLoginInfoAsync(userName, password, sender, message, receptor, unixdate, msgmode, status, statusmessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendSimpleByLoginInfoAsync(ByVal userName As String, ByVal password As String, ByVal sender As String, ByVal message As String, ByVal receptor() As String, ByVal unixdate As Long, ByVal msgmode As Integer, ByVal status As Integer, ByVal statusmessage As String, ByVal userState As Object)
            If (Me.SendSimpleByLoginInfoOperationCompleted Is Nothing) Then
                Me.SendSimpleByLoginInfoOperationCompleted = AddressOf Me.OnSendSimpleByLoginInfoOperationCompleted
            End If
            Me.InvokeAsync("SendSimpleByLoginInfo", New Object() {userName, password, sender, message, receptor, unixdate, msgmode, status, statusmessage}, Me.SendSimpleByLoginInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendSimpleByLoginInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendSimpleByLoginInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendSimpleByLoginInfoCompleted(Me, New SendSimpleByLoginInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.kavenegar.com/SendArrayByApikey", RequestNamespace:="http://api.kavenegar.com/", ResponseNamespace:="http://api.kavenegar.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendArrayByApikey(ByVal apikey As String, ByVal sender() As String, ByVal message() As String, ByVal receptor() As String, ByVal unixdate As Long, ByVal msgmode() As Integer, ByRef status As Integer, ByRef statusmessage As String) As Long()
            Dim results() As Object = Me.Invoke("SendArrayByApikey", New Object() {apikey, sender, message, receptor, unixdate, msgmode, status, statusmessage})
            status = CType(results(1),Integer)
            statusmessage = CType(results(2),String)
            Return CType(results(0),Long())
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendArrayByApikeyAsync(ByVal apikey As String, ByVal sender() As String, ByVal message() As String, ByVal receptor() As String, ByVal unixdate As Long, ByVal msgmode() As Integer, ByVal status As Integer, ByVal statusmessage As String)
            Me.SendArrayByApikeyAsync(apikey, sender, message, receptor, unixdate, msgmode, status, statusmessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendArrayByApikeyAsync(ByVal apikey As String, ByVal sender() As String, ByVal message() As String, ByVal receptor() As String, ByVal unixdate As Long, ByVal msgmode() As Integer, ByVal status As Integer, ByVal statusmessage As String, ByVal userState As Object)
            If (Me.SendArrayByApikeyOperationCompleted Is Nothing) Then
                Me.SendArrayByApikeyOperationCompleted = AddressOf Me.OnSendArrayByApikeyOperationCompleted
            End If
            Me.InvokeAsync("SendArrayByApikey", New Object() {apikey, sender, message, receptor, unixdate, msgmode, status, statusmessage}, Me.SendArrayByApikeyOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendArrayByApikeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendArrayByApikeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendArrayByApikeyCompleted(Me, New SendArrayByApikeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.kavenegar.com/SendArrayByLoginInfo", RequestNamespace:="http://api.kavenegar.com/", ResponseNamespace:="http://api.kavenegar.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendArrayByLoginInfo(ByVal userName As String, ByVal password As String, ByVal sender() As String, ByVal message() As String, ByVal receptor() As String, ByVal unixdate As Long, ByVal msgmode() As Integer, ByRef status As Integer, ByRef statusmessage As String) As Long()
            Dim results() As Object = Me.Invoke("SendArrayByLoginInfo", New Object() {userName, password, sender, message, receptor, unixdate, msgmode, status, statusmessage})
            status = CType(results(1),Integer)
            statusmessage = CType(results(2),String)
            Return CType(results(0),Long())
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendArrayByLoginInfoAsync(ByVal userName As String, ByVal password As String, ByVal sender() As String, ByVal message() As String, ByVal receptor() As String, ByVal unixdate As Long, ByVal msgmode() As Integer, ByVal status As Integer, ByVal statusmessage As String)
            Me.SendArrayByLoginInfoAsync(userName, password, sender, message, receptor, unixdate, msgmode, status, statusmessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendArrayByLoginInfoAsync(ByVal userName As String, ByVal password As String, ByVal sender() As String, ByVal message() As String, ByVal receptor() As String, ByVal unixdate As Long, ByVal msgmode() As Integer, ByVal status As Integer, ByVal statusmessage As String, ByVal userState As Object)
            If (Me.SendArrayByLoginInfoOperationCompleted Is Nothing) Then
                Me.SendArrayByLoginInfoOperationCompleted = AddressOf Me.OnSendArrayByLoginInfoOperationCompleted
            End If
            Me.InvokeAsync("SendArrayByLoginInfo", New Object() {userName, password, sender, message, receptor, unixdate, msgmode, status, statusmessage}, Me.SendArrayByLoginInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendArrayByLoginInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendArrayByLoginInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendArrayByLoginInfoCompleted(Me, New SendArrayByLoginInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.kavenegar.com/GetStatusByApikey", RequestNamespace:="http://api.kavenegar.com/", ResponseNamespace:="http://api.kavenegar.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetStatusByApikey(ByVal apikey As String, ByVal messageid() As Long, ByRef status As Integer, ByRef statusmessage As String) As Integer()
            Dim results() As Object = Me.Invoke("GetStatusByApikey", New Object() {apikey, messageid, status, statusmessage})
            status = CType(results(1),Integer)
            statusmessage = CType(results(2),String)
            Return CType(results(0),Integer())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetStatusByApikeyAsync(ByVal apikey As String, ByVal messageid() As Long, ByVal status As Integer, ByVal statusmessage As String)
            Me.GetStatusByApikeyAsync(apikey, messageid, status, statusmessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetStatusByApikeyAsync(ByVal apikey As String, ByVal messageid() As Long, ByVal status As Integer, ByVal statusmessage As String, ByVal userState As Object)
            If (Me.GetStatusByApikeyOperationCompleted Is Nothing) Then
                Me.GetStatusByApikeyOperationCompleted = AddressOf Me.OnGetStatusByApikeyOperationCompleted
            End If
            Me.InvokeAsync("GetStatusByApikey", New Object() {apikey, messageid, status, statusmessage}, Me.GetStatusByApikeyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetStatusByApikeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetStatusByApikeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetStatusByApikeyCompleted(Me, New GetStatusByApikeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.kavenegar.com/GetStatusByLoginInfo", RequestNamespace:="http://api.kavenegar.com/", ResponseNamespace:="http://api.kavenegar.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetStatusByLoginInfo(ByVal userName As String, ByVal password As String, ByVal messageid() As Long, ByRef status As Integer, ByRef statusmessage As String) As Integer()
            Dim results() As Object = Me.Invoke("GetStatusByLoginInfo", New Object() {userName, password, messageid, status, statusmessage})
            status = CType(results(1),Integer)
            statusmessage = CType(results(2),String)
            Return CType(results(0),Integer())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetStatusByLoginInfoAsync(ByVal userName As String, ByVal password As String, ByVal messageid() As Long, ByVal status As Integer, ByVal statusmessage As String)
            Me.GetStatusByLoginInfoAsync(userName, password, messageid, status, statusmessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetStatusByLoginInfoAsync(ByVal userName As String, ByVal password As String, ByVal messageid() As Long, ByVal status As Integer, ByVal statusmessage As String, ByVal userState As Object)
            If (Me.GetStatusByLoginInfoOperationCompleted Is Nothing) Then
                Me.GetStatusByLoginInfoOperationCompleted = AddressOf Me.OnGetStatusByLoginInfoOperationCompleted
            End If
            Me.InvokeAsync("GetStatusByLoginInfo", New Object() {userName, password, messageid, status, statusmessage}, Me.GetStatusByLoginInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetStatusByLoginInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetStatusByLoginInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetStatusByLoginInfoCompleted(Me, New GetStatusByLoginInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.kavenegar.com/CancelByApikey", RequestNamespace:="http://api.kavenegar.com/", ResponseNamespace:="http://api.kavenegar.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CancelByApikey(ByVal apikey As String, ByVal messageid() As Long, ByRef status As Integer, ByRef statusmessage As String) As Integer()
            Dim results() As Object = Me.Invoke("CancelByApikey", New Object() {apikey, messageid, status, statusmessage})
            status = CType(results(1),Integer)
            statusmessage = CType(results(2),String)
            Return CType(results(0),Integer())
        End Function
        
        '''<remarks/>
        Public Overloads Sub CancelByApikeyAsync(ByVal apikey As String, ByVal messageid() As Long, ByVal status As Integer, ByVal statusmessage As String)
            Me.CancelByApikeyAsync(apikey, messageid, status, statusmessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CancelByApikeyAsync(ByVal apikey As String, ByVal messageid() As Long, ByVal status As Integer, ByVal statusmessage As String, ByVal userState As Object)
            If (Me.CancelByApikeyOperationCompleted Is Nothing) Then
                Me.CancelByApikeyOperationCompleted = AddressOf Me.OnCancelByApikeyOperationCompleted
            End If
            Me.InvokeAsync("CancelByApikey", New Object() {apikey, messageid, status, statusmessage}, Me.CancelByApikeyOperationCompleted, userState)
        End Sub
        
        Private Sub OnCancelByApikeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.CancelByApikeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CancelByApikeyCompleted(Me, New CancelByApikeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.kavenegar.com/CancelByLoginInfo", RequestNamespace:="http://api.kavenegar.com/", ResponseNamespace:="http://api.kavenegar.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CancelByLoginInfo(ByVal userName As String, ByVal password As String, ByVal messageid() As Long, ByRef status As Integer, ByRef statusmessage As String) As Integer()
            Dim results() As Object = Me.Invoke("CancelByLoginInfo", New Object() {userName, password, messageid, status, statusmessage})
            status = CType(results(1),Integer)
            statusmessage = CType(results(2),String)
            Return CType(results(0),Integer())
        End Function
        
        '''<remarks/>
        Public Overloads Sub CancelByLoginInfoAsync(ByVal userName As String, ByVal password As String, ByVal messageid() As Long, ByVal status As Integer, ByVal statusmessage As String)
            Me.CancelByLoginInfoAsync(userName, password, messageid, status, statusmessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CancelByLoginInfoAsync(ByVal userName As String, ByVal password As String, ByVal messageid() As Long, ByVal status As Integer, ByVal statusmessage As String, ByVal userState As Object)
            If (Me.CancelByLoginInfoOperationCompleted Is Nothing) Then
                Me.CancelByLoginInfoOperationCompleted = AddressOf Me.OnCancelByLoginInfoOperationCompleted
            End If
            Me.InvokeAsync("CancelByLoginInfo", New Object() {userName, password, messageid, status, statusmessage}, Me.CancelByLoginInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnCancelByLoginInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.CancelByLoginInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CancelByLoginInfoCompleted(Me, New CancelByLoginInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.kavenegar.com/ReceiveByApikey", RequestNamespace:="http://api.kavenegar.com/", ResponseNamespace:="http://api.kavenegar.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReceiveByApikey(ByVal apikey As String, ByVal lineNumber As String, ByVal isread As Short, ByRef status As Integer, ByRef statusmessage As String) As ApiReceive()
            Dim results() As Object = Me.Invoke("ReceiveByApikey", New Object() {apikey, lineNumber, isread, status, statusmessage})
            status = CType(results(1),Integer)
            statusmessage = CType(results(2),String)
            Return CType(results(0),ApiReceive())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReceiveByApikeyAsync(ByVal apikey As String, ByVal lineNumber As String, ByVal isread As Short, ByVal status As Integer, ByVal statusmessage As String)
            Me.ReceiveByApikeyAsync(apikey, lineNumber, isread, status, statusmessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReceiveByApikeyAsync(ByVal apikey As String, ByVal lineNumber As String, ByVal isread As Short, ByVal status As Integer, ByVal statusmessage As String, ByVal userState As Object)
            If (Me.ReceiveByApikeyOperationCompleted Is Nothing) Then
                Me.ReceiveByApikeyOperationCompleted = AddressOf Me.OnReceiveByApikeyOperationCompleted
            End If
            Me.InvokeAsync("ReceiveByApikey", New Object() {apikey, lineNumber, isread, status, statusmessage}, Me.ReceiveByApikeyOperationCompleted, userState)
        End Sub
        
        Private Sub OnReceiveByApikeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReceiveByApikeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReceiveByApikeyCompleted(Me, New ReceiveByApikeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.kavenegar.com/ReceiveByLoginInfo", RequestNamespace:="http://api.kavenegar.com/", ResponseNamespace:="http://api.kavenegar.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReceiveByLoginInfo(ByVal userName As String, ByVal password As String, ByVal lineNumber As String, ByVal isread As Short, ByRef status As Integer, ByRef statusmessage As String) As ApiReceive()
            Dim results() As Object = Me.Invoke("ReceiveByLoginInfo", New Object() {userName, password, lineNumber, isread, status, statusmessage})
            status = CType(results(1),Integer)
            statusmessage = CType(results(2),String)
            Return CType(results(0),ApiReceive())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReceiveByLoginInfoAsync(ByVal userName As String, ByVal password As String, ByVal lineNumber As String, ByVal isread As Short, ByVal status As Integer, ByVal statusmessage As String)
            Me.ReceiveByLoginInfoAsync(userName, password, lineNumber, isread, status, statusmessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReceiveByLoginInfoAsync(ByVal userName As String, ByVal password As String, ByVal lineNumber As String, ByVal isread As Short, ByVal status As Integer, ByVal statusmessage As String, ByVal userState As Object)
            If (Me.ReceiveByLoginInfoOperationCompleted Is Nothing) Then
                Me.ReceiveByLoginInfoOperationCompleted = AddressOf Me.OnReceiveByLoginInfoOperationCompleted
            End If
            Me.InvokeAsync("ReceiveByLoginInfo", New Object() {userName, password, lineNumber, isread, status, statusmessage}, Me.ReceiveByLoginInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnReceiveByLoginInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReceiveByLoginInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReceiveByLoginInfoCompleted(Me, New ReceiveByLoginInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.kavenegar.com/RemainCreditByApiKey", RequestNamespace:="http://api.kavenegar.com/", ResponseNamespace:="http://api.kavenegar.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RemainCreditByApiKey(ByVal apikey As String, ByRef status As Integer, ByRef statusmessage As String) As Long
            Dim results() As Object = Me.Invoke("RemainCreditByApiKey", New Object() {apikey, status, statusmessage})
            status = CType(results(1),Integer)
            statusmessage = CType(results(2),String)
            Return CType(results(0),Long)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RemainCreditByApiKeyAsync(ByVal apikey As String, ByVal status As Integer, ByVal statusmessage As String)
            Me.RemainCreditByApiKeyAsync(apikey, status, statusmessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemainCreditByApiKeyAsync(ByVal apikey As String, ByVal status As Integer, ByVal statusmessage As String, ByVal userState As Object)
            If (Me.RemainCreditByApiKeyOperationCompleted Is Nothing) Then
                Me.RemainCreditByApiKeyOperationCompleted = AddressOf Me.OnRemainCreditByApiKeyOperationCompleted
            End If
            Me.InvokeAsync("RemainCreditByApiKey", New Object() {apikey, status, statusmessage}, Me.RemainCreditByApiKeyOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemainCreditByApiKeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemainCreditByApiKeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemainCreditByApiKeyCompleted(Me, New RemainCreditByApiKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.kavenegar.com/RemainCreditByLoginInfo", RequestNamespace:="http://api.kavenegar.com/", ResponseNamespace:="http://api.kavenegar.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RemainCreditByLoginInfo(ByVal userName As String, ByVal password As String, ByRef status As Integer, ByRef statusmessage As String) As Long
            Dim results() As Object = Me.Invoke("RemainCreditByLoginInfo", New Object() {userName, password, status, statusmessage})
            status = CType(results(1),Integer)
            statusmessage = CType(results(2),String)
            Return CType(results(0),Long)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RemainCreditByLoginInfoAsync(ByVal userName As String, ByVal password As String, ByVal status As Integer, ByVal statusmessage As String)
            Me.RemainCreditByLoginInfoAsync(userName, password, status, statusmessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemainCreditByLoginInfoAsync(ByVal userName As String, ByVal password As String, ByVal status As Integer, ByVal statusmessage As String, ByVal userState As Object)
            If (Me.RemainCreditByLoginInfoOperationCompleted Is Nothing) Then
                Me.RemainCreditByLoginInfoOperationCompleted = AddressOf Me.OnRemainCreditByLoginInfoOperationCompleted
            End If
            Me.InvokeAsync("RemainCreditByLoginInfo", New Object() {userName, password, status, statusmessage}, Me.RemainCreditByLoginInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemainCreditByLoginInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemainCreditByLoginInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemainCreditByLoginInfoCompleted(Me, New RemainCreditByLoginInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://api.kavenegar.com/")>  _
    Partial Public Class ApiReceive
        
        Private messageidField As Long
        
        Private messageField As String
        
        Private senderField As String
        
        Private receptorField As String
        
        Private dateField As Long
        
        '''<remarks/>
        Public Property messageid() As Long
            Get
                Return Me.messageidField
            End Get
            Set
                Me.messageidField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property message() As String
            Get
                Return Me.messageField
            End Get
            Set
                Me.messageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property sender() As String
            Get
                Return Me.senderField
            End Get
            Set
                Me.senderField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property receptor() As String
            Get
                Return Me.receptorField
            End Get
            Set
                Me.receptorField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property [date]() As Long
            Get
                Return Me.dateField
            End Get
            Set
                Me.dateField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub SendSimpleByApikeyCompletedEventHandler(ByVal sender As Object, ByVal e As SendSimpleByApikeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendSimpleByApikeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Long()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Long())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property status() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property statusmessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub SendSimpleByLoginInfoCompletedEventHandler(ByVal sender As Object, ByVal e As SendSimpleByLoginInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendSimpleByLoginInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Long()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Long())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property status() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property statusmessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub SendArrayByApikeyCompletedEventHandler(ByVal sender As Object, ByVal e As SendArrayByApikeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendArrayByApikeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Long()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Long())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property status() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property statusmessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub SendArrayByLoginInfoCompletedEventHandler(ByVal sender As Object, ByVal e As SendArrayByLoginInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendArrayByLoginInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Long()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Long())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property status() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property statusmessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetStatusByApikeyCompletedEventHandler(ByVal sender As Object, ByVal e As GetStatusByApikeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetStatusByApikeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property status() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property statusmessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetStatusByLoginInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetStatusByLoginInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetStatusByLoginInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property status() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property statusmessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub CancelByApikeyCompletedEventHandler(ByVal sender As Object, ByVal e As CancelByApikeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CancelByApikeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property status() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property statusmessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub CancelByLoginInfoCompletedEventHandler(ByVal sender As Object, ByVal e As CancelByLoginInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CancelByLoginInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property status() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property statusmessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub ReceiveByApikeyCompletedEventHandler(ByVal sender As Object, ByVal e As ReceiveByApikeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReceiveByApikeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ApiReceive()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ApiReceive())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property status() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property statusmessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub ReceiveByLoginInfoCompletedEventHandler(ByVal sender As Object, ByVal e As ReceiveByLoginInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReceiveByLoginInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ApiReceive()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ApiReceive())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property status() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property statusmessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub RemainCreditByApiKeyCompletedEventHandler(ByVal sender As Object, ByVal e As RemainCreditByApiKeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RemainCreditByApiKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property status() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property statusmessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub RemainCreditByLoginInfoCompletedEventHandler(ByVal sender As Object, ByVal e As RemainCreditByLoginInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RemainCreditByLoginInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property status() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property statusmessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
End Namespace
